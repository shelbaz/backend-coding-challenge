[
  {
    "name": "Cities.getSome",
    "filePath": "src/server/controllers/city.js",
    "lines": [
      {
        "lineNumber": 24,
        "line": "    /**"
      },
      {
        "lineNumber": 25,
        "line": "     * Get only specific attributes of all rows."
      },
      {
        "lineNumber": 26,
        "line": "     *"
      },
      {
        "lineNumber": 27,
        "line": "     * @param {Request} req.arr The array of attributes selected "
      },
      {
        "lineNumber": 28,
        "line": "     * @param {Response} res Response of server"
      },
      {
        "lineNumber": 29,
        "line": "     * @return {Array of {Objects}} of all cities"
      },
      {
        "lineNumber": 30,
        "line": "    */"
      },
      {
        "lineNumber": 31,
        "line": "    static async getSome(req, res){"
      }
    ],
    "codeParams": [
      "req",
      "res"
    ],
    "docParams": [
      "res"
    ]
  },
  {
    "name": "Cities.getMatches",
    "filePath": "src/server/controllers/city.js",
    "lines": [
      {
        "lineNumber": 46,
        "line": "    /**"
      },
      {
        "lineNumber": 47,
        "line": "     * Get partial string match of cities in database and return all attributes of matches"
      },
      {
        "lineNumber": 48,
        "line": "     *"
      },
      {
        "lineNumber": 49,
        "line": "     * @param {String} req.body.query Query string"
      },
      {
        "lineNumber": 50,
        "line": "     * @param {Response} res Response of server"
      },
      {
        "lineNumber": 51,
        "line": "     * @return {Array of {Objects}} matches of cities"
      },
      {
        "lineNumber": 52,
        "line": "    */"
      },
      {
        "lineNumber": 53,
        "line": "    static async getMatches(req, res){"
      }
    ],
    "codeParams": [
      "req",
      "res"
    ],
    "docParams": [
      "res"
    ]
  },
  {
    "name": "adminCodeToZip",
    "filePath": "src/server/controllers/city.js",
    "lines": [
      {
        "lineNumber": 73,
        "line": "/**"
      },
      {
        "lineNumber": 74,
        "line": " * Convert numeric province code to 2 letter code if Canada"
      },
      {
        "lineNumber": 75,
        "line": " *"
      },
      {
        "lineNumber": 76,
        "line": " * @param {String} Integer string of province code"
      },
      {
        "lineNumber": 77,
        "line": " * @return {String} of province code (CA) or state code (US)"
      },
      {
        "lineNumber": 78,
        "line": "*/"
      },
      {
        "lineNumber": 79,
        "line": "function adminCodeToZip(adminCode){"
      }
    ],
    "codeParams": [
      "adminCode"
    ],
    "docParams": [
      "Integer"
    ]
  },
  {
    "name": "getSuggestionScore",
    "filePath": "src/server/lib/suggestions.js",
    "lines": [
      {
        "lineNumber": 7,
        "line": "/**"
      },
      {
        "lineNumber": 8,
        "line": " * Compute a certainty score for the potential match of query."
      },
      {
        "lineNumber": 9,
        "line": " *"
      },
      {
        "lineNumber": 10,
        "line": " * @param {String} city The potential city."
      },
      {
        "lineNumber": 11,
        "line": " * @param {Double} c1_latitude The latitude in the search."
      },
      {
        "lineNumber": 12,
        "line": " * @param {Double} c1_longitude The longitude in the search."
      },
      {
        "lineNumber": 13,
        "line": " * @param {Double} c2_latitude The latitude of the potential match."
      },
      {
        "lineNumber": 14,
        "line": " * @param {Double} c2_longitude The The longitude of the potential match."
      },
      {
        "lineNumber": 15,
        "line": " * @return {Integer} between 0-1 to compute certainty."
      },
      {
        "lineNumber": 16,
        "line": "*/"
      },
      {
        "lineNumber": 17,
        "line": "function getSuggestionScore(city, c1_latitude, c1_longtitude, c2_latitude, c2_longtitude){"
      }
    ],
    "codeParams": [
      "city",
      "c1_latitude",
      "c1_longtitude",
      "c2_latitude",
      "c2_longtitude"
    ],
    "docParams": [
      "city",
      "c1_latitude",
      "c1_longitude",
      "c2_latitude",
      "c2_longitude"
    ]
  },
  {
    "name": "generateSuggestions",
    "filePath": "src/server/lib/suggestions.js",
    "lines": [
      {
        "lineNumber": 26,
        "line": "/**"
      },
      {
        "lineNumber": 27,
        "line": " * Generate the suggestions array of objects with their attributes "
      },
      {
        "lineNumber": 28,
        "line": " *"
      },
      {
        "lineNumber": 29,
        "line": " * @param {String} query The partial or full query of a city."
      },
      {
        "lineNumber": 30,
        "line": " * @param {Double} c1_latitude The latitude in the search."
      },
      {
        "lineNumber": 31,
        "line": " * @param {Double} c1_longitude The longitude in the search."
      },
      {
        "lineNumber": 32,
        "line": " * @return {Array of {Objects}} between 0-1 to compute certainty."
      },
      {
        "lineNumber": 33,
        "line": " * @return Object attributes : name, lattitude, longitude, score"
      },
      {
        "lineNumber": 34,
        "line": "*/"
      },
      {
        "lineNumber": 35,
        "line": "function generateSuggestions(query, c1_latitude, c1_longtitude){"
      }
    ],
    "codeParams": [
      "query",
      "c1_latitude",
      "c1_longtitude"
    ],
    "docParams": [
      "query",
      "c1_latitude",
      "c1_longitude"
    ]
  },
  {
    "name": "calculateDistance",
    "filePath": "src/server/lib/suggestions.js",
    "lines": [
      {
        "lineNumber": 39,
        "line": "/**"
      },
      {
        "lineNumber": 40,
        "line": " * Calculate the distance between 2 lat long coordinates "
      },
      {
        "lineNumber": 41,
        "line": " *"
      },
      {
        "lineNumber": 42,
        "line": " * @param {Double} c1_latitude The latitude of point 1."
      },
      {
        "lineNumber": 43,
        "line": " * @param {Double} c1_longitude The longitude of point 1."
      },
      {
        "lineNumber": 44,
        "line": " * @param {Double} c2_latitude The latitude of point 2."
      },
      {
        "lineNumber": 45,
        "line": " * @param {Double} c2_longitude The longitude of point 2."
      },
      {
        "lineNumber": 46,
        "line": " * @return {Integer} distance in kms between both points"
      },
      {
        "lineNumber": 47,
        "line": "*/"
      },
      {
        "lineNumber": 48,
        "line": "function calculateDistance(c1_longtitude, c1_latitude, c2_longtitude, c2_latitude){"
      }
    ],
    "codeParams": [
      "c1_longtitude",
      "c1_latitude",
      "c2_longtitude",
      "c2_latitude"
    ],
    "docParams": [
      "c1_latitude",
      "c1_longitude",
      "c2_latitude",
      "c2_longitude"
    ]
  },
  {
    "name": "getPopulationPercentage",
    "filePath": "src/server/lib/suggestions.js",
    "lines": [
      {
        "lineNumber": 66,
        "line": "/**"
      },
      {
        "lineNumber": 67,
        "line": " * Calculate the percentage of the population of the city vs total population of all cities in the csv "
      },
      {
        "lineNumber": 68,
        "line": " *"
      },
      {
        "lineNumber": 69,
        "line": " * @param {Integer}population Population count of the city."
      },
      {
        "lineNumber": 70,
        "line": " * @param {String}country Country of the city."
      },
      {
        "lineNumber": 71,
        "line": " * @param {Integer} TOTAL_POPULATION Total population of all cities in the csv."
      },
      {
        "lineNumber": 72,
        "line": " * @return {Double} between 0-1 percentage of population "
      },
      {
        "lineNumber": 73,
        "line": "*/"
      },
      {
        "lineNumber": 74,
        "line": "function getPopulationPercentage(population, country, TOTAL_POPULATION){"
      }
    ],
    "codeParams": [
      "population",
      "country",
      "TOTAL_POPULATION"
    ],
    "docParams": [
      "{Integer}population",
      "{String}country",
      "TOTAL_POPULATION"
    ]
  },
  {
    "name": "getGeocodeCertainty",
    "filePath": "src/server/lib/suggestions.js",
    "lines": [
      {
        "lineNumber": 80,
        "line": "/**"
      },
      {
        "lineNumber": 81,
        "line": " * Geocode Localization for extra certainty using API"
      },
      {
        "lineNumber": 82,
        "line": " *"
      },
      {
        "lineNumber": 83,
        "line": " * @param {Double} c1_latitude The latitude of point 1."
      },
      {
        "lineNumber": 84,
        "line": " * @param {Double} c1_longitude The longitude of point 1."
      },
      {
        "lineNumber": 85,
        "line": " * @return {String} Potential guess of the city from the coordinates "
      },
      {
        "lineNumber": 86,
        "line": "*/"
      },
      {
        "lineNumber": 87,
        "line": "function getGeocodeCertainty(c1_latitude, c1_longtitude){"
      }
    ],
    "codeParams": [
      "c1_latitude",
      "c1_longtitude"
    ],
    "docParams": [
      "c1_latitude",
      "c1_longitude"
    ]
  }
]